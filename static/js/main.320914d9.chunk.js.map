{"version":3,"sources":["components/StateWrap.js","components/todaysTopHits.js","components/Loading.js","App.js","components/Reducer.js","index.js"],"names":["StateContext","createContext","StateWrap","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","SwiperCore","use","EffectCoverflow","TodaysTop","data","features","dispatch","useState","trackName","setTName","trackFeature","trackNameArr","tData","parameter","A","limit","domain","handleSlide","index","document","getElementsByClassName","getAttribute","tFeature","audio_features","type","danceability","energy","speechiness","acousticness","instrumentalness","liveness","trackDiv","tracks","items","map","track","i","className","itemRef","href","external_urls","spotify","target","alt","src","album","images","url","name","style","color","popularity","toString","join","artists","useEffect","a","axios","get","res","IDArray","post","trackID","loadingDisplay","loadData","then","id","loadFeature","effect","centeredSlides","slidesPerView","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","pagination","el","onSwiper","swiper","console","log","onTransitionEnd","ResponsiveContainer","height","window","innerHeight","width","margin","RadarChart","cx","cy","outerRadius","PolarGrid","stroke","Legend","iconType","verticalAlign","PolarAngleAxis","dataKey","Radar","fill","fillOpacity","Loading","display","App","state","action","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.320914d9.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\r\n\r\n// creating state context to use import and dispatch state values\r\nexport const StateContext = createContext();\r\n\r\nexport const StateWrap = ({reducer, initialState, children }) => {\r\n    return (\r\n        <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n    );\r\n    \r\n};\r\n\r\n//used to send and receive from data layer\r\nexport const useStateValue = () => useContext(StateContext);","import React, { useEffect, useState } from 'react';\r\nimport './todaysTopHits.css';\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport SwiperCore, { EffectCoverflow } from 'swiper';\r\nimport { useStateValue } from './StateWrap';\r\nimport 'swiper/swiper-bundle.css'\r\nimport axios from 'axios';\r\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis, ResponsiveContainer, Legend } from 'recharts';\r\n\r\n// Selecting the type of swiper effect to be used.\r\nSwiperCore.use([EffectCoverflow]);\r\n\r\n// App's main function\r\nfunction TodaysTop() {\r\n\r\n    //declaring state variables.\r\n    const [{ data, features }, dispatch] = useStateValue();\r\n    const [trackName, setTName] = useState(\"\");\r\n    var trackFeature = null;\r\n    var trackNameArr = [];\r\n    var tData = [\r\n        { parameter: 'Danceability', A: features[0], limit: 1, domain: [0, 1] },\r\n        { parameter: 'Energy', A: features[1], limit: 1, domain: [0, 1] },\r\n        { parameter: 'Speechiness', A: features[2], limit: 1, domain: [0, 1] },\r\n        { parameter: 'Acousticness', A: features[3], limit: 1, domain: [0, 1] },\r\n        { parameter: 'Instrumentalness', A: features[4], limit: 1, domain: [0, 1] },\r\n        { parameter: 'Liveness', A: features[5], limit: 1, domain: [0, 1] },\r\n    ];\r\n\r\n    // function used to determine the color of track popularity flame on green to red range.\r\n    function getColor(value) {\r\n        value = value / 100\r\n        var hue = ((1 - value) * 120).toString(10);\r\n        return [\"hsl(\", hue, \",100%,50%)\"].join(\"\");\r\n    }\r\n\r\n    // function used to handle changes when user swipes to the next track.\r\n    function handleSlide() {\r\n        let index = document.getElementsByClassName('swiper-slide-active')[0].getAttribute(\"itemRef\");\r\n\r\n        setTName(trackNameArr[index]);\r\n\r\n        if (trackFeature) {\r\n\r\n            let tFeature = trackFeature.audio_features[index];\r\n            dispatch({\r\n                type: 'UPDATE_FEATURES',\r\n                data: [tFeature.danceability, tFeature.energy, tFeature.speechiness, tFeature.acousticness, tFeature.instrumentalness, tFeature.liveness]\r\n            });\r\n        }\r\n    };\r\n\r\n    // function to define each slide html element based on track data.\r\n    const trackDiv = data.tracks.items.map((track, i) => {\r\n\r\n        return (\r\n            <SwiperSlide className=\"swiper-slide\" key={i} itemRef={i}>\r\n                <a href={track.track.external_urls.spotify} target=\"_blank\"><img alt=\"track cover\" src={track.track.album.images[0].url} /></a>\r\n                <h5 className=\"track-name\">{track.track.name} </h5>\r\n                <i className=\"fas fa-fire\" style={{\r\n                    color: getColor(track.track.popularity)\r\n                }}></i>\r\n                <h6>{track.track.artists[0].name}</h6>\r\n            </SwiperSlide>\r\n        );\r\n    });\r\n\r\n    // hook used to load data from spotify api.\r\n    useEffect(() => {\r\n        async function loadData() {\r\n            let res = await axios.get(\"https://spotifytophits.glitch.me/todaysTop\");\r\n            return res;\r\n        }\r\n        async function loadFeature(IDArray) {\r\n            let res = await axios.post(\"https://spotifytophits.glitch.me/trackFeature\", { trackID: IDArray });\r\n            return res;\r\n        }\r\n        dispatch({\r\n            type: 'TOGGLE_LOADING',\r\n            loadingDisplay: 'block'\r\n        })\r\n        loadData()\r\n            .then(res => {\r\n                dispatch({\r\n                    type: 'LOAD_DATA',\r\n                    data: res.data.data\r\n                })\r\n                return res.data.data;\r\n            }).then((res) => {\r\n                let IDArray = res.tracks.items.map((track) => {\r\n                    return track.track.id;\r\n                })\r\n                let nameArray = res.tracks.items.map((track) => {\r\n                    return track.track.name;\r\n                })\r\n                return [IDArray, nameArray];\r\n            }).then((res) => {\r\n                trackNameArr = res[1];\r\n                loadFeature(res[0])\r\n                    .then(res => {\r\n                        trackFeature = res.data.data;\r\n                        handleSlide();\r\n                        dispatch({\r\n                            type: 'TOGGLE_LOADING',\r\n                            loadingDisplay: 'none'\r\n                        })\r\n                    })\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"todaysTop container\">\r\n            <div className=\"todaysTop_row row\">\r\n                <div className=\"todaysTop_title col-12\">\r\n                    <h5>Spotify Today's Top Hits</h5>\r\n                </div>\r\n                <Swiper className=\"swiper\"\r\n                    effect=\"coverflow\"\r\n                    centeredSlides={true}\r\n                    slidesPerView={3}\r\n                    coverflowEffect={{\r\n                        rotate: 50,\r\n                        stretch: 0,\r\n                        depth: 100,\r\n                        modifier: 1,\r\n                        slideShadows: true,\r\n                    }}\r\n                    pagination={{\r\n                        el: '.swiper-pagnation'\r\n                    }}\r\n                    onSwiper={(swiper) => console.log(swiper)}\r\n                    onTransitionEnd={handleSlide}\r\n                >\r\n                    {trackDiv}\r\n                </Swiper>\r\n                <div className=\"todaysTop-track-feature col-12\">\r\n                    <ResponsiveContainer height={.25 * window.innerHeight} width=\"95%\" style={{ margin: \"auto\" }} >\r\n                        <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"80%\" width=\"80%\" data={tData} >\r\n                            <PolarGrid stroke=\"tomato\" />\r\n                            <Legend iconType=\"wye\" verticalAlign=\"top\" />\r\n                            <PolarAngleAxis dataKey=\"parameter\" />\r\n                            <Radar name={trackName} dataKey=\"A\" stroke=\"black\" fill=\"black\" fillOpacity={0.6}></Radar>\r\n                        </RadarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodaysTop;","import React from 'react';\r\nimport './Loading.css';\r\nimport { useStateValue } from './StateWrap';\r\n\r\n// method that returns a spinning loading sign \r\nfunction Loading() {\r\n    const [{ loadingDisplay }] = useStateValue();\r\n\r\n    return (\r\n        <div className=\"loading\" style={{display: loadingDisplay}}>\r\n            <div className=\"loading_row row\">\r\n                <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw col-12\"></span>\r\n                <div className=\"col-12 text\">Loading . . . </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import './App.css';\nimport TodaysTop from './components/todaysTopHits';\nimport Loading from './components/Loading';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Loading />\n     <TodaysTop />\n    </div>\n  );\n}\n\nexport default App;\n","export const initialState = {\r\n    features: [\r\n        0, 0, 0, 0, 0, 0\r\n    ],\r\n    data: {\r\n        tracks: {\r\n            items: []\r\n        }\r\n    },\r\n    loadingDisplay: 'none'\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"TOGGLE_LOADING\":\r\n            return {\r\n                ...state, loadingDisplay: action.loadingDisplay\r\n            };\r\n        case \"LOAD_DATA\":\r\n            return {\r\n                ...state, data: action.data\r\n            };\r\n        case \"UPDATE_FEATURES\":\r\n            return {\r\n                ...state, features: action.data\r\n            }\r\n            default:\r\n                return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StateWrap } from './components/StateWrap';\nimport reducer, { initialState } from './components/Reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateWrap initialState={initialState} reducer={reducer}>\n      <App />\n    </StateWrap>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}